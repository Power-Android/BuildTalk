package com.bjjy.buildtalk.ui.circle;import android.Manifest;import android.content.ActivityNotFoundException;import android.content.ContentResolver;import android.content.Intent;import android.database.Cursor;import android.net.Uri;import android.provider.MediaStore;import android.support.annotation.Nullable;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.TextUtils;import android.view.View;import android.widget.AdapterView;import android.widget.EditText;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.bjjy.buildtalk.R;import com.bjjy.buildtalk.adapter.PdfVewAdapter;import com.bjjy.buildtalk.app.Constants;import com.bjjy.buildtalk.base.activity.BaseActivity;import com.bjjy.buildtalk.core.event.PublishEvent;import com.bjjy.buildtalk.core.event.RefreshEvent;import com.bjjy.buildtalk.entity.PdfInfoEntity;import com.bjjy.buildtalk.entity.ThemeImageBean;import com.bjjy.buildtalk.entity.ThemeInfoEntity;import com.bjjy.buildtalk.utils.KeyboardUtils;import com.bjjy.buildtalk.utils.LogUtils;import com.bjjy.buildtalk.utils.ToastUtils;import com.bjjy.buildtalk.weight.MyGridAdapter;import com.bjjy.buildtalk.weight.NoScrollGridView;import com.luck.picture.lib.PictureSelector;import com.luck.picture.lib.config.PictureConfig;import com.luck.picture.lib.config.PictureMimeType;import com.luck.picture.lib.entity.LocalMedia;import com.luck.picture.lib.permissions.RxPermissions;import com.luck.picture.lib.tools.PictureFileUtils;import org.greenrobot.eventbus.EventBus;import java.io.File;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.OnClick;import io.reactivex.Observer;import io.reactivex.disposables.Disposable;import okhttp3.MediaType;import okhttp3.MultipartBody;import okhttp3.RequestBody;public class PublishActivity extends BaseActivity<PublishPresenter> implements PublishContarct.View {    @BindView(R.id.toolbar_title)    TextView mToolbarTitle;    @BindView(R.id.toolbar_right_publish)    TextView mToolbarRightTitle;    @BindView(R.id.toolbar_left_back)    ImageView mToolbarBack;    @BindView(R.id.publish_tv)    EditText mPublishTv;    @BindView(R.id.grid_view)    NoScrollGridView mGridView;    @BindView(R.id.sel_pic_iv)    ImageView mSelPicIv;    @BindView(R.id.pic_rl)    RelativeLayout mPicRl;    @BindView(R.id.recycler_view)    RecyclerView mRecyclerView;    @BindView(R.id.sel_pdf_iv)    ImageView mSelPdfIv;    private List<ThemeImageBean> list = new ArrayList<>();    private List<PdfInfoEntity> pdfList = new ArrayList<>();    private MyGridAdapter mMyGridAdapter;    private String mCircle_id;    private ThemeInfoEntity.ThemeInfoBean mData;    private boolean isEdit;    private int mTheme_id = -1;    private final static int REQUEST_CODE = 42;    private PdfVewAdapter mPdfVewAdapter;    @Override    protected int getLayoutId() {        return R.layout.activity_publish;    }    @Override    protected void onResume() {        setIsMargin(true);        super.onResume();    }    @Override    protected void initView() {        mCircle_id = getIntent().getStringExtra("circle_id");        mData = (ThemeInfoEntity.ThemeInfoBean) getIntent().getSerializableExtra("themeInfo");        String circle_name = getIntent().getStringExtra("circle_name");        if (mData != null) {            isEdit = true;            mTheme_id = mData.getTheme_id();            mPublishTv.setText(mData.getTheme_content());            if (mData.getTheme_image() != null) {                list = mData.getTheme_image();                //隐藏pdf布局                mSelPdfIv.setVisibility(View.GONE);                mRecyclerView.setVisibility(View.GONE);                mSelPicIv.setVisibility(View.VISIBLE);                mGridView.setVisibility(View.VISIBLE);            }            if (mData.getTheme_pdf() != null) {                for (int i = 0; i < mData.getTheme_pdf().size(); i++) {                    pdfList.add(new PdfInfoEntity(mData.getTheme_pdf().get(i).getPdf_name(),                            mData.getTheme_pdf().get(i).getPdf_url()));                }                //隐藏图片布局                mSelPicIv.setVisibility(View.GONE);                mGridView.setVisibility(View.GONE);                mSelPdfIv.setVisibility(View.VISIBLE);                mRecyclerView.setVisibility(View.VISIBLE);            }        }        mToolbarBack.setOnClickListener(v -> {            KeyboardUtils.hideSoftInput(this);            finish();        });        if (TextUtils.isEmpty(circle_name)) {            mToolbarTitle.setText("发主题");        } else {            mToolbarTitle.setText(circle_name);        }        mToolbarRightTitle.setVisibility(View.VISIBLE);//        KeyboardUtils.registerSoftInputChangedListener(this, height -> {////            if (height == 0) {////                mPicRl.setVisibility(View.GONE);////            } else {////                mPicRl.setVisibility(View.VISIBLE);////            }////        });    }    @Override    protected void initEventAndData() {        mMyGridAdapter = new MyGridAdapter(list, true);        mGridView.setAdapter(mMyGridAdapter);        mMyGridAdapter.setDeleteCallBack(position -> {            list.remove(position);            mMyGridAdapter.notifyDataSetChanged();            if (list.size() == 0) {                mSelPdfIv.setVisibility(View.VISIBLE);            }        });        mGridView.setOnItemClickListener((parent, view, position, id) -> {            if (position == list.size())                requestPhoto(9 - list.size());        });        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));        mPdfVewAdapter = new PdfVewAdapter(R.layout.adapter_pdf_view, pdfList);        mRecyclerView.setAdapter(mPdfVewAdapter);        mPdfVewAdapter.setOnItemClickListener((adapter, view, position) -> {            List<PdfInfoEntity> data = adapter.getData();            Intent intent = new Intent(PublishActivity.this, PDFViewerActivity.class);            intent.putExtra("data", data.get(position));            startActivity(intent);        });    }    private void requestPhoto(int maxNum) {        PictureSelector.create(this)                .openGallery(PictureMimeType.ofImage())//全部.PictureMimeType.ofAll()、图片.ofImage()、视频.ofVideo()、音频.ofAudio()                .maxSelectNum(maxNum)// 最大图片选择数量 int                .minSelectNum(1)// 最小选择数量 int                .imageSpanCount(4)// 每行显示个数 int                .selectionMode(PictureConfig.MULTIPLE)// 多选 or 单选 PictureConfig.MULTIPLE or PictureConfig.SINGLE                .previewImage(true)// 是否可预览图片 true or false                .previewVideo(false)// 是否可预览视频 true or false                .enablePreviewAudio(false) // 是否可播放音频 true or false                .isCamera(true)// 是否显示拍照按钮 true or false                .imageFormat(PictureMimeType.PNG)// 拍照保存图片格式后缀,默认jpeg                .isZoomAnim(true)// 图片列表点击 缩放效果 默认true                .sizeMultiplier(0.5f)// glide 加载图片大小 0~1之间 如设置 .glideOverride()无效                .setOutputCameraPath("/CustomPath")// 自定义拍照保存路径,可不填                .enableCrop(false)// 是否裁剪 true or false                .compress(false)// 是否压缩 true or false                .isGif(false)// 是否显示gif图片 true or false                .circleDimmedLayer(false)// 是否圆形裁剪 true or false                .showCropFrame(false)// 是否显示裁剪矩形边框 圆形裁剪时建议设为false   true or false                .showCropGrid(false)// 是否显示裁剪矩形网格 圆形裁剪时建议设为false    true or false                .openClickSound(false)// 是否开启点击声音 true or false                .withAspectRatio(1, 1)                .previewEggs(true)// 预览图片时 是否增强左右滑动图片体验(图片滑动一半即可看到上一张是否选中) true or false                .minimumCompressSize(100)// 小于100kb的图片不压缩                .synOrAsy(true)//同步true或异步false 压缩 默认同步                .forResult(PictureConfig.CHOOSE_REQUEST);//结果回调onActivityResult code    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK) {            if (requestCode == PictureConfig.CHOOSE_REQUEST) {                List<LocalMedia> mLocalMedia = PictureSelector.obtainMultipleResult(data);                for (int i = 0; i < mLocalMedia.size(); i++) {                    if (list.size() < 9) {                        File file = new File(mLocalMedia.get(i).getPath());                        RequestBody body = RequestBody.create(MediaType.parse("image/*"), file);   //说明该文件为图片类型                        MultipartBody.Part part = MultipartBody.Part.createFormData("file[]", file.getName(), body);                        list.add(new ThemeImageBean(mLocalMedia.get(i).getPath(), part, i));                    }                }                mMyGridAdapter.notifyDataSetChanged();                //隐藏pdf布局                mSelPdfIv.setVisibility(View.GONE);                mRecyclerView.setVisibility(View.GONE);                mSelPicIv.setVisibility(View.VISIBLE);                mGridView.setVisibility(View.VISIBLE);            } else if (requestCode == REQUEST_CODE) {                Uri uri = data.getData();                displayFromUri(uri);            }        }    }    private void displayFromUri(Uri uri) {        String pdfFilePath = getFilePath(uri);        String pdfFileName = pdfFilePath.substring(pdfFilePath.lastIndexOf("/") + 1);        pdfList.add(new PdfInfoEntity(uri, pdfFileName, pdfFilePath));        LogUtils.e(pdfFilePath);        LogUtils.e(pdfFileName);        mPdfVewAdapter.notifyDataSetChanged();        //隐藏图片布局        mSelPicIv.setVisibility(View.GONE);        mGridView.setVisibility(View.GONE);        mSelPdfIv.setVisibility(View.VISIBLE);        mRecyclerView.setVisibility(View.VISIBLE);    }    public String getFilePath(Uri uri) {        if (null == uri) return null;        final String scheme = uri.getScheme();        String data = null;        if (scheme == null)            data = uri.getPath();        else if (ContentResolver.SCHEME_FILE.equals(scheme)) {            data = uri.getPath();        } else if (ContentResolver.SCHEME_CONTENT.equals(scheme)) {            Cursor cursor = getContentResolver().query(uri, new String[]{MediaStore.Images.ImageColumns.DATA},                    null, null, null);            if (null != cursor) {                if (cursor.moveToFirst()) {                    int index = cursor.getColumnIndex(MediaStore.Images.ImageColumns.DATA);                    if (index > -1) {                        data = cursor.getString(index);                    }                }                cursor.close();            }        }        return data;    }    @OnClick({R.id.toolbar_right_publish, R.id.sel_pic_iv, R.id.sel_pdf_iv})    public void onViewClicked(View v) {        switch (v.getId()) {            case R.id.toolbar_right_publish:                if (TextUtils.isEmpty(mPublishTv.getText().toString().trim()) & list.size() <= 0 & pdfList.size() <= 0) {                    ToastUtils.showShort("请输入内容或图片");                    return;                }                if (pdfList.size() > 0) {                    mPresenter.pdf(mCircle_id, mTheme_id, mPublishTv.getText().toString().trim(), isEdit, pdfList);                } else {                    mPresenter.publishTheme(mCircle_id, mTheme_id, mPublishTv.getText().toString().trim(), isEdit, list);                }                showLoading();                break;            case R.id.sel_pic_iv:                if (list.size() >= 9) {                    ToastUtils.showShort("最多只能选择9张图片");                    return;                }                requestPhoto(9 - list.size());                checkPermissions("PIC", Manifest.permission.WRITE_EXTERNAL_STORAGE);                break;            case R.id.sel_pdf_iv:                if (pdfList.size() >= 5) {                    ToastUtils.showShort("最多上传5个PDF文件");                    return;                }                checkPermissions("PDF", Manifest.permission.READ_EXTERNAL_STORAGE);                break;        }    }    private void checkPermissions(String type, String permission) {        RxPermissions permissions = new RxPermissions(this);        permissions.request(permission).subscribe(new Observer<Boolean>() {            @Override            public void onSubscribe(Disposable d) {            }            @Override            public void onNext(Boolean aBoolean) {                if (aBoolean) {                    if (TextUtils.equals("PIC", type)) {                        PictureFileUtils.deleteCacheDirFile(PublishActivity.this);                    } else {                        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);                        intent.setType("application/pdf");                        intent.addCategory(Intent.CATEGORY_OPENABLE);                        try {                            startActivityForResult(intent, REQUEST_CODE);                        } catch (ActivityNotFoundException e) {                            //alert user that file manager not working                            Toast.makeText(PublishActivity.this, "文件管理器调取失败", Toast.LENGTH_SHORT).show();                        }                    }                } else {                    if (TextUtils.equals("PIC", type)) {                        Toast.makeText(PublishActivity.this,                                getString(R.string.picture_jurisdiction), Toast.LENGTH_SHORT).show();                    } else {                        Toast.makeText(PublishActivity.this,                                "权限被拒绝", Toast.LENGTH_SHORT).show();                    }                }            }            @Override            public void onError(Throwable e) {            }            @Override            public void onComplete() {            }        });    }    @Override    public void handlerPublishSuccess(String pic) {        hideLoading();        KeyboardUtils.hideSoftInput(this);        EventBus.getDefault().post(new RefreshEvent(Constants.TOPTIC_REFRESH));        if (!TextUtils.isEmpty(pic)) {            EventBus.getDefault().post(new PublishEvent(Constants.PUBLISH_ACTIVITY, pic));        }        finish();    }    @Override    protected void onDestroy() {        super.onDestroy();        KeyboardUtils.unregisterSoftInputChangedListener(this);    }}