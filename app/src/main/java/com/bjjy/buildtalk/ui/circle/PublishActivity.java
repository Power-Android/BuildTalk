package com.bjjy.buildtalk.ui.circle;import android.Manifest;import android.annotation.SuppressLint;import android.content.ActivityNotFoundException;import android.content.Intent;import android.net.Uri;import android.os.Bundle;import android.os.Handler;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.constraint.ConstraintLayout;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.text.Editable;import android.text.TextUtils;import android.text.TextWatcher;import android.view.Gravity;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import android.widget.ImageView;import android.widget.ProgressBar;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.bjjy.buildtalk.R;import com.bjjy.buildtalk.adapter.PdfVewAdapter;import com.bjjy.buildtalk.adapter.PublishCircleAdapter;import com.bjjy.buildtalk.app.Constants;import com.bjjy.buildtalk.base.activity.BaseActivity;import com.bjjy.buildtalk.core.event.PublishEvent;import com.bjjy.buildtalk.core.event.RefreshEvent;import com.bjjy.buildtalk.entity.IEntity;import com.bjjy.buildtalk.entity.PdfInfoEntity;import com.bjjy.buildtalk.entity.ThemeImageBean;import com.bjjy.buildtalk.entity.ThemeInfoEntity;import com.bjjy.buildtalk.utils.KeyboardUtils;import com.bjjy.buildtalk.utils.LogUtils;import com.bjjy.buildtalk.utils.SpanUtils;import com.bjjy.buildtalk.utils.ToastUtils;import com.bjjy.buildtalk.utils.UriUtils;import com.bjjy.buildtalk.videoeditor.TCVideoCutActivity;import com.bjjy.buildtalk.videorecord.TCVideoRecordActivity;import com.bjjy.buildtalk.weight.BaseDialog;import com.bjjy.buildtalk.weight.MyGridAdapter;import com.bjjy.buildtalk.weight.NoScrollGridView;import com.bumptech.glide.Glide;import com.luck.picture.lib.PictureSelector;import com.luck.picture.lib.config.PictureConfig;import com.luck.picture.lib.config.PictureMimeType;import com.luck.picture.lib.entity.LocalMedia;import com.luck.picture.lib.tools.PictureFileUtils;import com.suke.widget.SwitchButton;import com.tbruyelle.rxpermissions2.RxPermissions;import com.tencent.qcloud.ugckit.UGCKitConstants;import com.tencent.qcloud.ugckit.module.upload.TXUGCPublish;import com.tencent.qcloud.ugckit.module.upload.TXUGCPublishTypeDef;import com.tencent.qcloud.ugckit.utils.LogReport;import com.tencent.qcloud.ugckit.utils.NetworkUtil;import com.tencent.rtmp.ITXVodPlayListener;import com.tencent.rtmp.TXLiveConstants;import com.tencent.rtmp.TXVodPlayer;import com.tencent.rtmp.ui.TXCloudVideoView;import org.greenrobot.eventbus.EventBus;import java.io.File;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.OnClick;import io.reactivex.Observer;import io.reactivex.disposables.Disposable;public class PublishActivity extends BaseActivity<PublishPresenter> implements PublishContarct.View,        TXUGCPublishTypeDef.ITXVideoPublishListener {    @BindView(R.id.toolbar_title)    TextView mToolbarTitle;    @BindView(R.id.toolbar_right_publish)    TextView mToolbarRightTitle;    @BindView(R.id.toolbar_left_back)    ImageView mToolbarBack;    @BindView(R.id.publish_tv)    EditText mPublishTv;    @BindView(R.id.grid_view)    NoScrollGridView mGridView;    @BindView(R.id.sel_pic_iv)    ImageView mSelPicIv;    @BindView(R.id.pic_rl)    RelativeLayout mPicRl;    @BindView(R.id.recycler_view)    RecyclerView mRecyclerView;    @BindView(R.id.sel_pdf_iv)    ImageView mSelPdfIv;    @BindView(R.id.switch_button)    SwitchButton mSwitchButton;    @BindView(R.id.sel_video_iv)    ImageView mSelVideoIv;    @BindView(R.id.syn_tv)    TextView mSynTv;    @BindView(R.id.upload_progress_tv)    TextView mUploadProgressTv;    @BindView(R.id.video_view)    TXCloudVideoView mVideoView;    @BindView(R.id.cover_iv)    ImageView mCoverIv;    @BindView(R.id.play_iv)    ImageView mPlayIv;    @BindView(R.id.progressbar)    ProgressBar mProgressbar;    @BindView(R.id.video_cl)    ConstraintLayout mVideoCl;    @BindView(R.id.normalView)    RelativeLayout mNormalView;    @BindView(R.id.video_delete_iv)    ImageView mVideoDeleteIv;    private List<ThemeImageBean> list = new ArrayList<>();    private List<PdfInfoEntity> pdfList = new ArrayList<>();    private MyGridAdapter mMyGridAdapter;    private String mCircle_id;    private ThemeInfoEntity.ThemeInfoBean mData;    private boolean isEdit;    private int mTheme_id = -1;    private final static int REQUEST_CODE = 42;    private PdfVewAdapter mPdfVewAdapter;    private String mPublish_type;    private String mVideoPath = null;    private String mCoverPath = null;    private boolean mDisableCache;    @NonNull    private Handler mHandler = new Handler();    @Nullable    private TXUGCPublish mVideoPublish = null;    private String mVideoId;    private String mVideoURL;    private String mCoverURL;    private int mVideo_width = 360;    private int mVideo_height = 720;    private long mDuration;    private BaseDialog mCircleDialog;    private List<IEntity> mList;    private PublishCircleAdapter mCircleAdapter;    private String mCoverURL1;    @Override    protected void onNewIntent(Intent intent) {        super.onNewIntent(intent);        //下边3个是视频编辑页传过来的        mVideoPath = intent.getStringExtra(UGCKitConstants.VIDEO_PATH);        mCoverPath = intent.getStringExtra(UGCKitConstants.VIDEO_COVERPATH);        mDuration = intent.getLongExtra(UGCKitConstants.VIDEO_RECORD_DURATION, 0);        LogUtils.e(mVideoPath + "\n" + mCoverPath + "\n" + mDuration);        mDisableCache = intent.getBooleanExtra(UGCKitConstants.VIDEO_RECORD_NO_CACHE, false);        if (!TextUtils.isEmpty(mVideoPath)) {            mVideoCl.setVisibility(View.VISIBLE);            mSelPicIv.setAlpha(0.5f);            mSelPicIv.setEnabled(false);            mSelPdfIv.setAlpha(0.5f);            mSelPdfIv.setEnabled(false);            mSelVideoIv.setAlpha(1.0f);            mSelVideoIv.setEnabled(true);            setPublishPath(mVideoPath, mCoverPath);            mPresenter.getSign();        }    }    @Override    protected int getLayoutId() {        return R.layout.activity_publish;    }    @Override    protected void onResume() {        setIsMargin(true);        super.onResume();    }    @Override    protected void initView() {        mPublish_type = getIntent().getStringExtra("publish_type");        mCircle_id = getIntent().getStringExtra("circle_id");        mData = (ThemeInfoEntity.ThemeInfoBean) getIntent().getSerializableExtra("themeInfo");        String circle_name = getIntent().getStringExtra("circle_name");        if (!TextUtils.isEmpty(mPublish_type)) {            mSynTv.setText("同时转发至圈子");            mSwitchButton.setChecked(false);        }        mSwitchButton.setOnCheckedChangeListener((view, isChecked) -> {            if (isChecked){                if (!TextUtils.isEmpty(mPublish_type)){//跳转选择圈子                    showCircleDialog();                }            }        });        if (mData != null) {            isEdit = true;            mTheme_id = mData.getTheme_id();            mPublishTv.setText(mData.getTheme_content());            if (mData.getTheme_image() != null && mData.getTheme_image().size() > 0) {                list = mData.getTheme_image();                //隐藏pdf布局,视频布局                mSelPdfIv.setAlpha(0.5f);                mSelPdfIv.setEnabled(false);                mRecyclerView.setVisibility(View.GONE);                mSelPicIv.setAlpha(1.0f);                mSelPicIv.setEnabled(true);                mGridView.setVisibility(View.VISIBLE);                mSelVideoIv.setAlpha(0.5f);                mSelVideoIv.setEnabled(false);                mVideoCl.setVisibility(View.GONE);            }            if (mData.getTheme_pdf() != null && mData.getTheme_pdf().size() > 0) {                for (int i = 0; i < mData.getTheme_pdf().size(); i++) {                    pdfList.add(new PdfInfoEntity(mData.getTheme_pdf().get(i).getPdf_name(),                            mData.getTheme_pdf().get(i).getPdf_url()));                }                //隐藏图片布局                mSelPicIv.setAlpha(0.5f);                mSelPicIv.setEnabled(false);                mGridView.setVisibility(View.GONE);                mSelPdfIv.setAlpha(1.0f);                mSelPdfIv.setEnabled(true);                mRecyclerView.setVisibility(View.VISIBLE);                mSelVideoIv.setAlpha(0.5f);                mSelVideoIv.setEnabled(false);                mVideoCl.setVisibility(View.GONE);            }            if (mData.getTheme_video() != null && mData.getTheme_video().size() > 0){                mVideoURL = mData.getTheme_video().get(0).getVideo_url();                mVideoId = mData.getTheme_video().get(0).getVideo_id()+"";                mVideo_height = Integer.parseInt(mData.getTheme_video().get(0).getVideo_height());                mVideo_width = Integer.parseInt(mData.getTheme_video().get(0).getVideo_width());                mCoverURL = mData.getTheme_video().get(0).getCoverURL();                mDuration = Long.parseLong(mData.getTheme_video().get(0).getVideo_duration());                Glide.with(this).load(mCoverURL).into(mCoverIv);                mSelPicIv.setAlpha(0.5f);                mSelPicIv.setEnabled(false);                mGridView.setVisibility(View.GONE);                mSelPdfIv.setAlpha(0.5f);                mSelPdfIv.setEnabled(false);                mRecyclerView.setVisibility(View.GONE);                mSelVideoIv.setAlpha(1.0f);                mSelVideoIv.setEnabled(true);                mVideoCl.setVisibility(View.VISIBLE);            }        }        mToolbarBack.setOnClickListener(v -> {            KeyboardUtils.hideSoftInput(this);            finish();        });        if (TextUtils.isEmpty(circle_name)) {            mToolbarTitle.setText("发主题");        } else {            mToolbarTitle.setText(circle_name);        }        mToolbarRightTitle.setVisibility(View.VISIBLE);//        KeyboardUtils.registerSoftInputChangedListener(this, height -> {////            if (height == 0) {////                mPicRl.setVisibility(View.GONE);////            } else {////                mPicRl.setVisibility(View.VISIBLE);////            }////        });        mPublishTv.addTextChangedListener(new TextWatcher() {            @Override            public void beforeTextChanged(CharSequence s, int start, int count, int after) {            }            @Override            public void onTextChanged(CharSequence s, int start, int before, int count) {            }            @Override            public void afterTextChanged(Editable s) {                if (!TextUtils.isEmpty(s)) {                    mToolbarRightTitle.setAlpha(1.0f);                    mToolbarRightTitle.setEnabled(true);                } else {                    if (list.size() > 0 || pdfList.size() > 0 || !TextUtils.isEmpty(mVideoURL)){                        mToolbarRightTitle.setAlpha(1.0f);                        mToolbarRightTitle.setEnabled(true);                    }else {                        mToolbarRightTitle.setAlpha(0.5f);                        mToolbarRightTitle.setEnabled(false);                    }                }            }        });    }    private void showCircleDialog() {        if (mCircleDialog == null){            mCircleDialog = new BaseDialog.Builder(this)                    .setViewId(R.layout.dialog_publish_circle_layout)                    .setStyle(R.style.AppTheme)                    //设置显示位置                    .setGravity(Gravity.CENTER)                    //设置动画                    .setAnimation(R.style.Bottom_Top_aniamtion)                    //设置dialog的宽高                    .setWidthHeightpx(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT)                    //设置触摸dialog外围是否关闭                    .isOnTouchCanceled(true)                    .addViewOnClickListener(R.id.cancle_tv, v -> mCircleDialog.dismiss())                    .builder();            List<IEntity> mList = new ArrayList<>();            RecyclerView recyclerView = mCircleDialog.getView(R.id.recycler_view);            recyclerView.setLayoutManager(new LinearLayoutManager(this));            mCircleAdapter = new PublishCircleAdapter(R.layout.adapter_publish_circle, mList);            recyclerView.setAdapter(mCircleAdapter);            mPresenter.circleList(mCircleAdapter);        }        mCircleAdapter.setOnItemClickListener((adapter1, view, position) -> {            List<IEntity> data = adapter1.getData();            for (int i = 0; i < data.size(); i++) {                data.get(i).setChecked(false);            }            mCircle_id = data.get(position).getCircle_id();            data.get(position).setChecked(true);            adapter1.notifyDataSetChanged();            SpanUtils.with(mSynTv).append("同时转发至圈子")                    .append("《" + data.get(position).getCircle_name() + "》")                    .setForegroundColor(getResources().getColor(R.color.text_color6))                    .create();            mCircleDialog.dismiss();        });        mCircleDialog.show();    }    @Override    public void handlerCircleListSuccess(List<IEntity> iEntities, PublishCircleAdapter adapter) {        adapter.setNewData(iEntities);    }    /**     * 设置视频封面信息     *     * @param videoPath     * @param coverPath     */    private void setPublishPath(String videoPath, String coverPath) {        if (coverPath != null) {            Glide.with(this).load(Uri.fromFile(new File(coverPath))).into(mCoverIv);        }    }    /**     * 设置是否开启本地缓存，若关闭本地缓存，则发布完成后删除"已发布"的视频和封面     *     * @param disableCache     */    private void setCacheEnable(boolean disableCache) {        if (TextUtils.isEmpty(mVideoPath))            return;        File file = new File(mVideoPath);        if (file.exists()) {            file.delete();        }        if (!TextUtils.isEmpty(mCoverPath)) {            file = new File(mCoverPath);            if (file.exists()) {                file.delete();            }        }    }    @Override    public void handlerSignSuccess(String sign) {        NetworkUtil.getInstance(this).registerNetChangeReceiver();        startPublish(sign);    }    private void startPublish(String mCosSignature) {        mHandler.post(() -> {            if (mVideoPublish == null) {                mVideoPublish = new TXUGCPublish(this, mCosSignature);            }            /**             * 设置视频发布监听器             */            mVideoPublish.setListener(PublishActivity.this);            TXUGCPublishTypeDef.TXPublishParam param = new TXUGCPublishTypeDef.TXPublishParam();            param.signature = mCosSignature;            param.videoPath = mVideoPath;            param.coverPath = mCoverPath;            mVideoPublish.publishVideo(param);//                if (publishCode != 0) {//                    mTVPublish.setText("发布失败，错误码：" + publishCode);//                }            NetworkUtil.getInstance(this).setNetchangeListener(() ->                    LogUtils.e("网络连接断开，视频上传失败"));        });    }    @Override    protected void initEventAndData() {        mMyGridAdapter = new MyGridAdapter(list, true);        mGridView.setAdapter(mMyGridAdapter);        mMyGridAdapter.setDeleteCallBack(position -> {            list.remove(position);            mMyGridAdapter.notifyDataSetChanged();            if (list.size() == 0) {                mSelPicIv.setAlpha(1.0f);                mSelPicIv.setEnabled(true);                mSelPdfIv.setAlpha(1.0f);                mSelPdfIv.setEnabled(true);                mSelVideoIv.setAlpha(1.0f);                mSelVideoIv.setEnabled(true);                mToolbarRightTitle.setAlpha(0.5f);                mToolbarRightTitle.setEnabled(false);            }        });        mGridView.setOnItemClickListener((parent, view, position, id) -> {            if (position == list.size())                requestPhoto(9 - list.size());        });        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));        mPdfVewAdapter = new PdfVewAdapter(R.layout.adapter_pdf_view, pdfList);        mRecyclerView.setAdapter(mPdfVewAdapter);        mPdfVewAdapter.setOnItemClickListener((adapter, view, position) -> {            List<PdfInfoEntity> data = adapter.getData();            Intent intent = new Intent(PublishActivity.this, PDFViewerActivity.class);            intent.putExtra("data", data.get(position));            startActivity(intent);        });    }    private void requestPhoto(int maxNum) {        PictureSelector.create(this)                .openGallery(PictureMimeType.ofAll())//全部.PictureMimeType.ofAll()、图片.ofImage()、视频.ofVideo()、音频.ofAudio()                .maxSelectNum(maxNum)// 最大图片选择数量 int                .minSelectNum(1)// 最小选择数量 int                .imageSpanCount(4)// 每行显示个数 int                .selectionMode(PictureConfig.MULTIPLE)// 多选 or 单选 PictureConfig.MULTIPLE or PictureConfig.SINGLE                .previewImage(true)// 是否可预览图片 true or false                .previewVideo(true)// 是否可预览视频 true or false                .enablePreviewAudio(false) // 是否可播放音频 true or false                .isCamera(true)// 是否显示拍照按钮 true or false                .imageFormat(PictureMimeType.PNG)// 拍照保存图片格式后缀,默认jpeg                .isZoomAnim(true)// 图片列表点击 缩放效果 默认true                .sizeMultiplier(0.5f)// glide 加载图片大小 0~1之间 如设置 .glideOverride()无效                .setOutputCameraPath("/CustomPath")// 自定义拍照保存路径,可不填                .enableCrop(false)// 是否裁剪 true or false                .compress(false)// 是否压缩 true or false                .isGif(false)// 是否显示gif图片 true or false                .circleDimmedLayer(false)// 是否圆形裁剪 true or false                .showCropFrame(false)// 是否显示裁剪矩形边框 圆形裁剪时建议设为false   true or false                .showCropGrid(false)// 是否显示裁剪矩形网格 圆形裁剪时建议设为false    true or false                .openClickSound(false)// 是否开启点击声音 true or false                .withAspectRatio(1, 1)                .previewEggs(true)// 预览图片时 是否增强左右滑动图片体验(图片滑动一半即可看到上一张是否选中) true or false                .minimumCompressSize(100)// 小于100kb的图片不压缩                .synOrAsy(true)//同步true或异步false 压缩 默认同步                .forResult(PictureConfig.CHOOSE_REQUEST);//结果回调onActivityResult code    }    @Override    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK) {            if (requestCode == PictureConfig.CHOOSE_REQUEST) {                List<LocalMedia> mLocalMedia = PictureSelector.obtainMultipleResult(data);                //TODO 通过duration > 0 来判断是否是视频                if (mLocalMedia.get(0).getDuration() > 0){                        Intent intent = new Intent(this, TCVideoCutActivity.class);                        intent.putExtra(UGCKitConstants.VIDEO_PATH, mLocalMedia.get(0).getPath());                        startActivity(intent);                }else {                    for (int i = 0; i < mLocalMedia.size(); i++) {                        if (list.size() < 9) {//                        File file = new File(mLocalMedia.get(i).getPath());//                        RequestBody body = RequestBody.create(MediaType.parse("image/*"), file);   //说明该文件为图片类型//                        MultipartBody.Part part = MultipartBody.Part.createFormData("file[]", file.getName(), body);                            list.add(new ThemeImageBean(mLocalMedia.get(i).getPath(), i, ""));                        }                    }                    mMyGridAdapter.notifyDataSetChanged();                    //隐藏pdf布局,视频布局                    mSelPdfIv.setAlpha(0.5f);                    mSelPdfIv.setEnabled(false);                    mSelVideoIv.setAlpha(0.5f);                    mSelVideoIv.setEnabled(false);                    mRecyclerView.setVisibility(View.GONE);                    mSelPicIv.setEnabled(true);                    mSelPicIv.setAlpha(1.0f);                    mGridView.setVisibility(View.VISIBLE);                }            } else if (requestCode == REQUEST_CODE) {                Uri uri = data.getData();                displayFromUri(uri);            }            mToolbarRightTitle.setAlpha(1.0f);            mToolbarRightTitle.setEnabled(true);        }    }    private void displayFromUri(Uri uri) {        File file = UriUtils.uri2File(uri);        if (file == null) {            return;        }        String pdfFilePath = file.getPath();        String pdfFileName = file.getName();        String zhui = pdfFileName.substring(pdfFileName.length() - 4);        String name = pdfFileName.substring(0, pdfFileName.length() - 4);        if (!zhui.equals(".pdf")) {            ToastUtils.showShort("请选择PDF文件");            return;        }        pdfList.add(new PdfInfoEntity(uri, name, pdfFilePath));        LogUtils.e(pdfFilePath);        LogUtils.e(pdfFileName);        mPdfVewAdapter.notifyDataSetChanged();        mPublishTv.setAlpha(1.0f);        //隐藏图片布局        mSelPicIv.setAlpha(0.5f);        mSelPicIv.setEnabled(false);        mSelVideoIv.setAlpha(0.5f);        mSelVideoIv.setEnabled(false);        mGridView.setVisibility(View.GONE);        mSelPdfIv.setAlpha(1.0f);        mSelPdfIv.setEnabled(true);        mRecyclerView.setVisibility(View.VISIBLE);    }    @OnClick({R.id.toolbar_right_publish, R.id.sel_pic_iv, R.id.sel_pdf_iv, R.id.sel_video_iv, R.id.video_delete_iv})    public void onViewClicked(View v) {        switch (v.getId()) {            case R.id.toolbar_right_publish:                if (TextUtils.isEmpty(mPublishTv.getText().toString().trim()) & list.size() <= 0 &                        pdfList.size() <= 0) {                    ToastUtils.showShort("请输入内容或素材");                    return;                }                if (pdfList.size() > 0) {//发表PDF                    mPresenter.pdf(mCircle_id, mTheme_id, mPublishTv.getText().toString(), isEdit,                            mSwitchButton.isChecked(), pdfList, mPublish_type);                } else if (!TextUtils.isEmpty(mVideoId)) {//发表视频                    mPresenter.video(mCircle_id, mTheme_id, mPublishTv.getText().toString(), isEdit,                            mSwitchButton.isChecked(), mPublish_type, mVideoId, mVideoURL, mCoverURL,                            String.valueOf(mVideo_width), String.valueOf(mVideo_height), String.valueOf(mDuration));                } else if (!TextUtils.isEmpty(mPublishTv.getText().toString()) || list.size() > 0) {//发表文字/图片                    mPresenter.publishImages(mCircle_id, mTheme_id, mPublishTv.getText().toString(),                            isEdit, mSwitchButton.isChecked(), list, mPublish_type);                }                showLoading();                break;            case R.id.sel_pic_iv:                if (list.size() >= 9) {                    ToastUtils.showShort("最多只能选择9张图片");                    return;                }                requestPhoto(9 - list.size());                checkPermissions("PIC", Manifest.permission.WRITE_EXTERNAL_STORAGE);                break;            case R.id.sel_pdf_iv:                if (pdfList.size() >= 5) {                    ToastUtils.showShort("最多上传5个PDF文件");                    return;                }                checkPermissions("PDF", Manifest.permission.READ_EXTERNAL_STORAGE);                break;            case R.id.sel_video_iv:                Intent intent = new Intent(this, TCVideoRecordActivity.class);                startActivity(intent);                break;            case R.id.video_delete_iv:                mVideoCl.setVisibility(View.GONE);                mVideoId = "";                mVideoURL = "";                mSelPdfIv.setAlpha(1.0f);                mSelPdfIv.setEnabled(true);                mSelPicIv.setAlpha(1.0f);                mSelPicIv.setEnabled(true);                mSelVideoIv.setAlpha(1.0f);                mSelVideoIv.setEnabled(true);                break;        }    }    private void checkPermissions(String type, String permission) {        RxPermissions permissions = new RxPermissions(this);        permissions.request(permission).subscribe(new Observer<Boolean>() {            @Override            public void onSubscribe(Disposable d) {            }            @Override            public void onNext(Boolean aBoolean) {                if (aBoolean) {                    if (TextUtils.equals("PIC", type)) {                        PictureFileUtils.deleteCacheDirFile(PublishActivity.this);                    } else {                        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);                        intent.setType("application/pdf");                        intent.addCategory(Intent.CATEGORY_OPENABLE);                        try {                            startActivityForResult(intent, REQUEST_CODE);                        } catch (ActivityNotFoundException e) {                            //alert user that file manager not working                            Toast.makeText(PublishActivity.this, "文件管理器调取失败", Toast.LENGTH_SHORT).show();                        }                    }                } else {                    if (TextUtils.equals("PIC", type)) {                        Toast.makeText(PublishActivity.this,                                getString(R.string.picture_jurisdiction), Toast.LENGTH_SHORT).show();                    } else {                        Toast.makeText(PublishActivity.this,                                "权限被拒绝", Toast.LENGTH_SHORT).show();                    }                }            }            @Override            public void onError(Throwable e) {            }            @Override            public void onComplete() {            }        });    }    @Override    public void handlerPublishSuccess(String pic) {        hideLoading();        KeyboardUtils.hideSoftInput(this);        EventBus.getDefault().post(new RefreshEvent(Constants.TOPTIC_REFRESH));        if (!TextUtils.isEmpty(pic)) {            EventBus.getDefault().post(new PublishEvent(Constants.PUBLISH_ACTIVITY, pic));        }        finish();    }    @Override    protected void onDestroy() {        super.onDestroy();        KeyboardUtils.unregisterSoftInputChangedListener(this);        realsevideo();    }    private void realsevideo() {        setCacheEnable(mDisableCache);    }    /**     * 视频发布进度     *     * @param uploadBytes     * @param totalBytes     */    @SuppressLint("DefaultLocale")    @Override    public void onPublishProgress(long uploadBytes, long totalBytes) {        int progress = (int) (uploadBytes * 100 / totalBytes);        mProgressbar.setProgress(progress);        mUploadProgressTv.setText(String.format("正在上传...%d%%", progress));    }    /**     * 视频发布结果回调<p/>     * 当视频发布成功后，发布到点播系统，此时就可以在视频列表看到"已发布的视频"     *     * @param publishResult     */    @Override    public void onPublishComplete(TXUGCPublishTypeDef.TXPublishResult publishResult) {        LogUtils.e("onPublishComplete:" + publishResult.retCode);        /**         * ELK数据上报：视频发布到点播系统         */        LogReport.getInstance().reportPublishVideo(publishResult);        if (publishResult.retCode == TXUGCPublishTypeDef.PUBLISH_RESULT_OK) {            mUploadProgressTv.setText("上传完成");            mVideoId = publishResult.videoId;            mVideoURL = publishResult.videoURL;            mCoverURL = publishResult.coverURL;            LogUtils.e(mVideoId + "\n" + mVideoURL + "\n" + mCoverURL);            getVideoWH(mVideoURL);            //隐藏图片布局            mSelPicIv.setAlpha(0.5f);            mSelPicIv.setEnabled(false);            mSelVideoIv.setAlpha(1.0f);            mSelVideoIv.setEnabled(true);            mGridView.setVisibility(View.GONE);            mSelPdfIv.setAlpha(0.5f);            mSelPdfIv.setEnabled(false);            mRecyclerView.setVisibility(View.GONE);            mToolbarRightTitle.setAlpha(1.0f);            mToolbarRightTitle.setEnabled(true);        } else {            if (publishResult.descMsg.contains("java.net.UnknownHostException") || publishResult.descMsg.contains("java.net.ConnectException")) {                ToastUtils.showShort("网络连接断开，视频上传失败");            } else {                LogUtils.e(publishResult.descMsg);            }            LogUtils.e(publishResult.descMsg);        }    }    private void getVideoWH(String videoURL) {        TXVodPlayer vodPlayer = new TXVodPlayer(this);        vodPlayer.setPlayerView(mVideoView);        vodPlayer.setAutoPlay(false);        vodPlayer.startPlay(videoURL);        vodPlayer.setRenderMode(TXLiveConstants.RENDER_MODE_FULL_FILL_SCREEN);        vodPlayer.setVodListener(new ITXVodPlayListener() {            @Override            public void onPlayEvent(TXVodPlayer txVodPlayer, int event, Bundle bundle) {//                if (event == PLAY_EVT_PLAY_PROGRESS) {//                    // 视频总长, 单位是秒//                    int duration = bundle.getInt(TXLiveConstants.EVT_PLAY_DURATION);//                    mDuration = String.valueOf(duration);//                }            }            @Override            public void onNetStatus(TXVodPlayer txVodPlayer, Bundle bundle) {                mVideo_width = bundle.getInt("VIDEO_WIDTH", 360);                mVideo_height = bundle.getInt("VIDEO_HEIGHT", 720);                LogUtils.e(mVideo_width + "\n" + mVideo_height);                vodPlayer.setVodListener(null);            }        });    }}