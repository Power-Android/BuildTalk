package com.bjjy.buildtalk.core.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bjjy.buildtalk.entity.SongsEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SONGS_ENTITY".
*/
public class SongsEntityDao extends AbstractDao<SongsEntity, Void> {

    public static final String TABLENAME = "SONGS_ENTITY";

    /**
     * Properties of entity SongsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Article_id = new Property(0, String.class, "article_id", false, "ARTICLE_ID");
        public final static Property Audio_url = new Property(1, String.class, "audio_url", false, "AUDIO_URL");
        public final static Property Article_title = new Property(2, String.class, "article_title", false, "ARTICLE_TITLE");
        public final static Property Duration = new Property(3, long.class, "duration", false, "DURATION");
        public final static Property Audio_picUrl = new Property(4, String.class, "audio_picUrl", false, "AUDIO_PIC_URL");
        public final static Property CurrentTime = new Property(5, long.class, "currentTime", false, "CURRENT_TIME");
        public final static Property Position = new Property(6, int.class, "position", false, "POSITION");
    }


    public SongsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SongsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SONGS_ENTITY\" (" + //
                "\"ARTICLE_ID\" TEXT," + // 0: article_id
                "\"AUDIO_URL\" TEXT," + // 1: audio_url
                "\"ARTICLE_TITLE\" TEXT," + // 2: article_title
                "\"DURATION\" INTEGER NOT NULL ," + // 3: duration
                "\"AUDIO_PIC_URL\" TEXT," + // 4: audio_picUrl
                "\"CURRENT_TIME\" INTEGER NOT NULL ," + // 5: currentTime
                "\"POSITION\" INTEGER NOT NULL );"); // 6: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SONGS_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SongsEntity entity) {
        stmt.clearBindings();
 
        String article_id = entity.getArticle_id();
        if (article_id != null) {
            stmt.bindString(1, article_id);
        }
 
        String audio_url = entity.getAudio_url();
        if (audio_url != null) {
            stmt.bindString(2, audio_url);
        }
 
        String article_title = entity.getArticle_title();
        if (article_title != null) {
            stmt.bindString(3, article_title);
        }
        stmt.bindLong(4, entity.getDuration());
 
        String audio_picUrl = entity.getAudio_picUrl();
        if (audio_picUrl != null) {
            stmt.bindString(5, audio_picUrl);
        }
        stmt.bindLong(6, entity.getCurrentTime());
        stmt.bindLong(7, entity.getPosition());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SongsEntity entity) {
        stmt.clearBindings();
 
        String article_id = entity.getArticle_id();
        if (article_id != null) {
            stmt.bindString(1, article_id);
        }
 
        String audio_url = entity.getAudio_url();
        if (audio_url != null) {
            stmt.bindString(2, audio_url);
        }
 
        String article_title = entity.getArticle_title();
        if (article_title != null) {
            stmt.bindString(3, article_title);
        }
        stmt.bindLong(4, entity.getDuration());
 
        String audio_picUrl = entity.getAudio_picUrl();
        if (audio_picUrl != null) {
            stmt.bindString(5, audio_picUrl);
        }
        stmt.bindLong(6, entity.getCurrentTime());
        stmt.bindLong(7, entity.getPosition());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public SongsEntity readEntity(Cursor cursor, int offset) {
        SongsEntity entity = new SongsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // article_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // audio_url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // article_title
            cursor.getLong(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // audio_picUrl
            cursor.getLong(offset + 5), // currentTime
            cursor.getInt(offset + 6) // position
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SongsEntity entity, int offset) {
        entity.setArticle_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAudio_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArticle_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDuration(cursor.getLong(offset + 3));
        entity.setAudio_picUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCurrentTime(cursor.getLong(offset + 5));
        entity.setPosition(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(SongsEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(SongsEntity entity) {
        return null;
    }

    @Override
    public boolean hasKey(SongsEntity entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
